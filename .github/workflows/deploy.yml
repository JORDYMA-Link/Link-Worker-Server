name: Blink-Worker CD

on:
  push:
    branches: [ feat/fcm-push ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # JDK 세팅
      - uses: actions/checkout@v3
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: 'adopt'

      #gradle 캐싱
      - name: Gradle Caching
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      # application.yml을 s3로 부터 다운로드
      - name: Getting S3 Object
        id: s3
        uses: jcfrane/s3-get-object-action@v1.0
        with:
          region: ap-southeast-2
          bucket: blink-env
          aws-access-key: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          object-key: env/dev/application.yml
          filename: application.yml

      # move application yml
      - name: Move application.yml
        run: |
          mkdir -p src/main/resources
          mv application.yml src/main/resources

      # gradlew 권한
      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew
        shell: bash

      # 테스트를 제외한 프로젝트 빌드
      - name: Build Worker and Batch
        run: |
          ./gradlew :blink-worker:build -x test
          ./gradlew :blink-batch:build -x test

      # version 라벨링용
      - name: Get current time
        uses: 1466587594/get-current-time@v2
        id: current-time
        with:
          format: YYYY-MM-DDTHH-mm-ss
          utcOffset: "+09:00" # 한국 시간

      - name: Generate deployment packages
        run: |
          mkdir -p deploy/worker
          cp blink-worker/build/libs/*-SNAPSHOT.jar deploy/worker/application.jar
          if test -e Procfile ; then cp Procfile ./deploy/worker/Procfile ; fi
          if test -d .ebextensions ; then cp -r .ebextensions deploy/worker/.ebextensions ; fi
          if test -d .platform ; then cp -r .platform deploy/worker/.platform ; fi
          cd deploy/worker && zip -r ../worker-deploy.zip . && cd ../..

          mkdir -p deploy/batch
          cp blink-batch/build/libs/*-SNAPSHOT.jar deploy/batch/application.jar
          if test -e Procfile ; then cp Procfile ./deploy/batch/Procfile ; fi
          if test -d .ebextensions ; then cp -r .ebextensions deploy/batch/.ebextensions ; fi
          if test -d .platform ; then cp -r .platform deploy/batch/.platform ; fi
          if test -e cron.yaml ; then cp cron.yaml deploy/batch/cron.yaml ; fi
          cd deploy/batch && zip -r ../batch-deploy.zip . && cd ../..

          cd deploy
          mkdir -p combined
          unzip -o worker-deploy.zip -d combined/worker
          unzip -o batch-deploy.zip -d combined/batch
          cd combined && zip -r ../combined-deploy.zip .

        # Beanstalk Deploy 플러그인 사용
      - name: Beanstalk Deploy
        uses: einaregilsson/beanstalk-deploy@v14
        with:
          aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          application_name: link-server-worker
          environment_name: Link-server-worker-env-1
          version_label: Link-${{steps.current-time.outputs.formattedTime}}
          region: ap-northeast-2
          deployment_package: deploy/combined-deploy.zip
          wait_for_environment_recovery: 900